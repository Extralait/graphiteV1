# Generated by Django 3.2.9 on 2021-12-15 12:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('drops_collections', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('drops', '0002_initial'),
        ('auction', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wallet_number', models.CharField(max_length=20, unique=True, verbose_name='Wallet number')),
                ('owner_key', models.CharField(max_length=256, verbose_name='Owner key')),
                ('inn', models.CharField(blank=True, max_length=256, null=True, verbose_name='INN')),
                ('balance', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Balance')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='user/avatars', verbose_name='Avatar')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='user/cover', verbose_name='Cover')),
                ('profile_type', models.CharField(blank=True, choices=[('entity', 'Entity'), ('individual', 'Individual')], max_length=20, null=True, verbose_name='Profile type')),
                ('verify_status', models.CharField(choices=[('not_verified', 'Not verified'), ('moderation', 'Moderation'), ('verified', 'Verified')], default='not_verified', max_length=20, verbose_name='Verify status')),
                ('email_notification', models.BooleanField(default=False, verbose_name='E-mail notification')),
                ('description', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Description')),
                ('instagram', models.CharField(blank=True, max_length=50, null=True, verbose_name='Instagram')),
                ('twitter', models.CharField(blank=True, max_length=50, null=True, verbose_name='Twitter')),
                ('discord', models.CharField(blank=True, max_length=50, null=True, verbose_name='Discord')),
                ('tiktok', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tiktok')),
                ('telegram', models.CharField(blank=True, max_length=50, null=True, verbose_name='Telegram')),
                ('website', models.CharField(blank=True, max_length=256, null=True, verbose_name='Website')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('auction_bids', models.ManyToManyField(related_name='bids', through='auction.AuctionUserBid', to='auction.Auction', verbose_name='Auction bids')),
                ('collection_subscriptions', models.ManyToManyField(related_name='subscribers', through='drops_collections.CollectionSubscription', to='drops_collections.Collection', verbose_name='Collections subscribers')),
                ('collections_likes', models.ManyToManyField(related_name='likes', through='drops_collections.CollectionLike', to='drops_collections.Collection', verbose_name='Collections likes')),
                ('collections_views', models.ManyToManyField(related_name='views', through='drops_collections.CollectionView', to='drops_collections.Collection', verbose_name='Collections views')),
                ('drop_likes', models.ManyToManyField(related_name='likes', through='drops.DropLike', to='drops.Drop', verbose_name='Drops likes')),
                ('drop_subscriptions', models.ManyToManyField(related_name='subscribers', through='drops.DropSubscription', to='drops.Drop', verbose_name='Drops subscribers')),
                ('drop_views', models.ManyToManyField(related_name='views', through='drops.DropView', to='drops.Drop', verbose_name='Drops views')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UsersGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'User group',
                'verbose_name_plural': 'Users groups',
            },
        ),
        migrations.CreateModel(
            name='PassportData',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='passport_data', serialize=False, to='users.user', verbose_name='Passport data')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Last name')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Birthday')),
                ('passport_series', models.CharField(blank=True, max_length=50, null=True, verbose_name='Passport series')),
                ('passport_number', models.IntegerField(blank=True, null=True, verbose_name='Passport number')),
                ('passport_issue_date', models.DateField(blank=True, null=True, verbose_name='Passport issue date')),
                ('passport_expiration_date', models.DateField(blank=True, null=True, verbose_name='Passport Expiration Date')),
                ('verify_status', models.CharField(choices=[('not_verified', 'Not verified'), ('moderation', 'Moderation'), ('verified', 'Verified')], default='not_verified', max_length=20, verbose_name='Verify Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('looking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_looking', to=settings.AUTH_USER_MODEL, verbose_name='Looking')),
                ('overlooked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_overlooked', to=settings.AUTH_USER_MODEL, verbose_name='Overlooked')),
            ],
            options={
                'verbose_name': 'User view',
                'verbose_name_plural': 'Users views',
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_subscriber', to=settings.AUTH_USER_MODEL, verbose_name='Subscriber')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_subscription', to=settings.AUTH_USER_MODEL, verbose_name='Subscription')),
            ],
            options={
                'verbose_name': 'User subscription',
                'verbose_name_plural': 'Users subscriptions',
            },
        ),
        migrations.CreateModel(
            name='UsersGroupUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Level')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_group_user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_group_user', to='users.usersgroup', verbose_name='User group')),
            ],
            options={
                'verbose_name': 'Users group user',
                'verbose_name_plural': 'Users groups users',
            },
        ),
        migrations.AddField(
            model_name='usersgroup',
            name='users',
            field=models.ManyToManyField(related_name='users_groups', through='users.UsersGroupUser', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_subscriptions',
            field=models.ManyToManyField(related_name='subscribers', through='users.UserSubscription', to=settings.AUTH_USER_MODEL, verbose_name='Users subscribers'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_views',
            field=models.ManyToManyField(related_name='views', through='users.UserView', to=settings.AUTH_USER_MODEL, verbose_name='Users views'),
        ),
        migrations.AddConstraint(
            model_name='userview',
            constraint=models.UniqueConstraint(fields=('looking', 'overlooked'), name='unique_user_view'),
        ),
        migrations.AddConstraint(
            model_name='usersubscription',
            constraint=models.UniqueConstraint(fields=('subscriber', 'subscription'), name='unique_user_subscription'),
        ),
        migrations.AddConstraint(
            model_name='usersgroupuser',
            constraint=models.UniqueConstraint(fields=('user_group', 'user'), name='unique_user_group_user'),
        ),
    ]
