# Generated by Django 3.2.9 on 2021-11-12 14:16

import api.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('wallet_number', models.CharField(max_length=20, unique=True, verbose_name='Wallet number')),
                ('owner_key', models.CharField(max_length=256, verbose_name='Owner_key')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='user/avatars', verbose_name='Avatar')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='user/cover', verbose_name='Cover')),
                ('profile_type', models.CharField(choices=[('entity', 'Entity'), ('individual', 'Individual')], default='individual', max_length=20, verbose_name='Profile Type')),
                ('verify_status', models.CharField(choices=[('not_verified', 'Not verified'), ('moderation', 'Moderation'), ('verified', 'Verified')], default='not_verified', max_length=20, verbose_name='Verify Status')),
                ('is_verify', models.BooleanField(default=False, verbose_name='Verify')),
                ('email_notification', models.BooleanField(default=False, verbose_name='email-notification')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('instagram', models.CharField(blank=True, max_length=50, null=True, verbose_name='Instagram')),
                ('twitter', models.CharField(blank=True, max_length=50, null=True, verbose_name='Twitter')),
                ('discord', models.CharField(blank=True, max_length=50, null=True, verbose_name='Discord')),
                ('tiktok', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tiktok')),
                ('telegram', models.CharField(blank=True, max_length=50, null=True, verbose_name='Telegram')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Drop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Name')),
                ('descriptions', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('picture_big', models.ImageField(blank=True, null=True, upload_to='drop/picture_big', verbose_name='Big picture')),
                ('picture_small', models.ImageField(blank=True, null=True, upload_to='drop/picture_small', verbose_name='Small picture')),
                ('url_landing', models.CharField(blank=True, max_length=256, null=True, verbose_name='Landing URL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('artists', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drop_artist', to=settings.AUTH_USER_MODEL, verbose_name='Artist')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='drops', to='api.categories', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Drop',
                'verbose_name_plural': 'Drops',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='UserUserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_user', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_of_interest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_of_interest', to=settings.AUTH_USER_MODEL, verbose_name='User of interest')),
            ],
            options={
                'verbose_name': 'User user subscription',
                'verbose_name_plural': 'Users user subscriptions',
            },
        ),
        migrations.CreateModel(
            name='UserDropSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('drop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.drop', verbose_name='drop')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Subscriber')),
            ],
            options={
                'verbose_name': 'User drop subscription',
                'verbose_name_plural': 'Users drops subscriptions',
            },
        ),
        migrations.CreateModel(
            name='OwnerDrop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('drop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.drop', verbose_name='drop')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'User drop',
                'verbose_name_plural': 'Users Drops',
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('drop', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='likes', to='api.drop', verbose_name='Drop')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='likes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Like',
                'verbose_name_plural': 'Likes',
            },
        ),
        migrations.AddField(
            model_name='drop',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='drops', to='api.Tags', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='user',
            name='drop_subscriptions',
            field=models.ManyToManyField(related_name='drops_subscriptions', through='api.UserDropSubscription', to='api.Drop', verbose_name='Drops subscribers'),
        ),
        migrations.AddField(
            model_name='user',
            name='drops',
            field=models.ManyToManyField(related_name='drops_owner', through='api.OwnerDrop', to='api.Drop', verbose_name='Drops'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_subscriptions',
            field=models.ManyToManyField(related_name='users_subscriptions', through='api.UserUserSubscription', to=settings.AUTH_USER_MODEL, verbose_name='Users subscribers'),
        ),
        migrations.AddConstraint(
            model_name='userusersubscription',
            constraint=models.UniqueConstraint(fields=('current_user', 'user_of_interest'), name='unique_user_subscriber'),
        ),
        migrations.AddConstraint(
            model_name='userdropsubscription',
            constraint=models.UniqueConstraint(fields=('subscriber', 'drop'), name='unique_drop_subscriber'),
        ),
        migrations.AddConstraint(
            model_name='ownerdrop',
            constraint=models.UniqueConstraint(fields=('owner', 'drop'), name='unicue_user_drop'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(fields=('user', 'drop'), name='unique_user_like'),
        ),
    ]
